DOCUMENTATION FOR USING GyaanINIT API

GET requests
1. Get User Information
  -END POINT: /api/users/getinfo?email={emailid}
  -METHOD:'GET'
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - info: Object containing
              {
                -name:String,
                -email:String,
                -uid:String,
                profilePic:String
              }

2. Verifying LoggedIn status
  -END POINT: /api/account/verifyLoginStatus
  -METHOD: 'GET'
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - user: Object
              {
                -name:String,
                -email:String,
                -uid:String,
                profilePic:String
              }

3. Logout
  -END POINT: /api/account/logout
  -METHOD: 'GET'
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - message: String

4. Get A List Of All Registered Users
  -END POINT: /api/users/getAllUsers
  -METHOD: 'GET'
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA: A list of Objects
      - [
          {
            -name:String,
            -email:String,
            -uid:String,
            profilePic:String
          },...
        ]

5. Search
  -END POINT: /api/tools/search?find={your query}
  -METHOD: 'GET'
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA: An object
      - {
          users:[
            {
              -name:String,
              -email:String,
              -uid:String,
              profilePic:String
            },...
          ],
          articles:[
            {

            },...
          ],
          posts:[
            {

            },...
          ],
          videos:[
            {

            },...
          ]
        }

6. Get all users present in a call
  -END POINT: /api/tools/getCallUserList?url={meet url}
  -METHOD: 'GET'
  -RESPONSE:
    -statusCode: 200
    - Content-Type:JSON
    - SCHEMA: An Object
      {
          validUrl: boolean ,
          admin_email:String ,
          users:[
                  {
                    User object in the Call,
                    -name:String,
                    -email:String,
                    -uid:String,
                    profilePic:String
                  }, ...
                ] - a list of user objects sorted by lexicographic order on Name
      }

7. Get Chat in a call
  -END POINT: /api/call/getCallChat?url={meet url}
  -METHOD: 'GET'
  -RESPONSE:
    -statusCode: 200
    - Content-Type:JSON
    - SCHEMA: An Object
      {
          status: boolean ,
          message: String ,
          chats:[
                  {
                    Chat object
                    -user: Object {name: String, email: String, uid: String ,profilePic: String},
                    -message: String,
                    -time: JavaScript Date Object
                  }, ...
                ] - a list of Chat objects sorted by timestamp in ascending order
      }


POST requests
1. Registering a User
  -END POINT: /api/account/register
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - name: String (mandatory)
    - email: String(mandatory)
    - password: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - message: String

2. Login a User
  -END POINT: /api/account/login
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - email: String(mandatory)
    - password: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - message: String
      -user:Object (if status true)


3. Test Password Strength
  -END POINT: /api/tools/password_strength
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - password: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - strength: Number between 0 and 100


4. Generate Call
  -END POINT: /api/call/generateCall
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - meetUrl: String(mandatory)
    - password: String(mandatory)
    - admin_email: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - url: String(if status true, maybe different from the url user sends in body)

5. Join Call
  -END POINT: /api/call/joinCall
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - meetUrl: String(mandatory)
    - password: String(mandatory)
    - user_email: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - url: String(if status true always same as the url user sends in body)
      - message: String

6. End Call
  -END POINT: /api/call/endCall
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - callUrl: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - message: String

7. End Call
  -END POINT: /api/call/verifyUserInCall
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - callUrl: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - message: String

8. Post Message in Call
  -END POINT: /api/call/postMessage
  -HEADERS: "Content-Type": "application/json"
  -METHOD: 'POST'
  -BODY/PAYLOAD SCHEMA:
    - callUrl: String(mandatory)
  -RESPONSE:
    - statusCode:200
    - Content-Type:JSON
    - SCHEMA:
      - status: boolean
      - message: String
